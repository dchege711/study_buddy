<!DOCTYPE html>
<html>

    <head>
        <title>Study Buddy</title>
        <% include ../partials/header.ejs %>
        <script src="/static/AppUtilities.js"></script>
        <script src="/static/MaxPriorityQueue.js"></script>
        <script src="/static/CardsManager.js"></script>
        <script src="/static/TernarySearchTrie.js"></script>
        <script src="/static/showdown.min.js"></script>
        <link rel="stylesheet" href="/stylesheets/themes/atom-one-light.css">
        <script src="/static/highlight.pack.js"></script>
        <script>

            /**
             * @description Make LEFT/RIGHT arrow keys show PREVIOUS/NEXT card.
             */ 
            function arrowKeysForNavigation(event) {
                if (event.key === "ArrowLeft") {
                    fetchPreviousCard();
                    event.preventDefault();
                } else if (event.key === "ArrowRight") {
                    fetchNextCard();
                    event.preventDefault();
                }
            }

            window.addEventListener("keydown", arrowKeysForNavigation);

        </script>
        
    </head>

    <body onload="includeInAppButtons(); initializeSideBar(); initializeCards();">

        <% include ../partials/navbar.ejs %>

        <div id="main_div">

            <div class="w3-container" id="status_bar">
                <button class="w3-button w3-left" onclick="filterCards()">
                    <b><i class="fa fa-refresh fa-fw" aria-hidden="true"></i> Apply Filters </b>
                </button>

                <div id="card_search_container" class="w3-half">
                    <div class="dropdown">
                        <input type="text" id="card_search_input" placeholder="Search card descriptions and titles..." onkeydown="searchCards(event)"
                            class="dropbtn" />
                        <div class="dropdown-content" id="card_search_results"></div>
                    </div>
                </div>

                <p id="filter_list" class="w3-right w3-container"></p>
                
            </div>

            <div class="w3-container">

                <div class="w3-container w3-left w3-quarter" id="side_bar">
                    <div id="side_bar_contents"></div>  
                </div>
                
                <div class="w3-container w3-right w3-threequarter" id="card_template">
                    <% include ../partials/card_template.ejs %>
                </div>

            </div>
            
        </div>

        <% include ../partials/footer.ejs %>


        <script type="text/javascript">

            /* Initialize variables that keep track of the state */
            var changed_items = new Set([]);
            var metadata = JSON.parse(localStorage.getItem("metadata"))[0];
            var current_card_id = null;
            var current_user_id = metadata.createdById;
            var raw_description = null;
            var selected_tags = new Set([]);
            var tags_and_ids = metadata.node_information[0];
            if (!tags_and_ids) tags_and_ids = {};
            var tags_trie = ternary_search_trie(Object.keys(tags_and_ids));

            var current_card_tags = new Set([]);
            var current_card_tags_have_changed = false;
            
            var my_cards_manager = cards_manager(tags_and_ids, current_user_id);
            var converter = new showdown.Converter();
            converter.setOption("headerLevelStart", 4);
            converter.setOption("literalMidWordUnderscores", true);
            converter.setOption("literalMidWordAsterisks", true);
            converter.setOption("tables", true);
            converter.setOption("simpleLineBreaks", true);

            var post_url;

            function initializeSideBar() {
                var tags_in_decreasing_order = Object.keys(tags_and_ids);
                tags_in_decreasing_order.sort(function (tag_a, tag_b) {
                    var tag_a_importance = 0;
                    var tag_b_importance = 0;

                    Object.keys(tags_and_ids[tag_b]).forEach((card_id) => {
                        tag_b_importance += tags_and_ids[tag_b][card_id]["urgency"]
                    });

                    Object.keys(tags_and_ids[tag_a]).forEach((card_id) => {
                        tag_a_importance += tags_and_ids[tag_a][card_id]["urgency"]
                    });
                    return tag_b_importance - tag_a_importance;
                });

                var tags_html = "";
                tags_in_decreasing_order.forEach((tag) => {
                    tags_html += "<ul id='" + tag +
                        "' class='link' onclick='selectThisTag(`" + tag +
                        "`);'> #" + tag + " (" + Object.keys(tags_and_ids[tag]).length +
                        ")</ul>";
                });
                
                document.getElementById("side_bar_contents").innerHTML = tags_html;
            }

            function initializeCards() {
                my_cards_manager.initialize(null, () => {
                    my_cards_manager.next((card) => {
                        renderCard(card);
                    });
                });
            }

            function fetchNextCard() {
                my_cards_manager.next((card) => {
                    if (card.title !== undefined) {
                        renderCard(card);
                    } else {
                        displayPopUp("Out of cards!", 1500);
                    } 
                });
            }

            function fetchPreviousCard() {
                my_cards_manager.previous((card) => {
                    if (card.title !== undefined) {
                        renderCard(card);
                    } else {
                        displayPopUp("Out of cards!", 1500);
                    } 
                });
            }

            function displayPopUp(text, timeout_ms) {
                var popup = document.getElementById("out_of_cards_popup");
                popup.innerHTML = text;
                popup.style.visibility = "visible";
                window.setTimeout(() => {
                    makeInvisible("out_of_cards_popup")
                }, timeout_ms);
            }

            function makeInvisible(element_id) {
                document.getElementById(element_id).style.visibility = "hidden";
            }

            function selectThisTag(tag) {
                if (selected_tags.has(tag)) {
                    selected_tags.delete(tag);
                } else {
                    selected_tags.add(tag);
                }                
                document.getElementById(tag).classList.toggle("chosen");
            }

            function filterCards() {
                
                // I apologize for this embarassing line. :-(
                var tags_to_use;

                // Communicate which cards are being displayed...
                if (selected_tags.size == 0) {
                    tags_to_use = null;
                    document.getElementById("filter_list").innerHTML = "Now showing: all";
                } else {
                    tags_to_use = selected_tags;
                    var status_message = "Now showing: ";
                    status_message += Array.from(selected_tags).join(", ");
                    document.getElementById("filter_list").innerHTML = status_message;
                }
                
                // Update the cards being displayed
                my_cards_manager.initialize(tags_to_use, () => {
                    my_cards_manager.next((card) => {
                        renderCard(card);
                    });

                    selected_tags.forEach((tag) => {
                        document.getElementById(tag).classList.toggle("chosen");
                    })
                    selected_tags.clear();
                });
            }

            function renderCard(card) {
                if (!card.title) {
                    displayNewCard();
                    return;
                }

                window.addEventListener("keydown", arrowKeysForNavigation);
                document.getElementById("card_title").value = card.title;
                
                // Workaround for allowing users to omit extra escaping backslashes
                // in their LaTEX. I can't afford to do store this string on the server.
                var description_html = converter.makeHtml(
                    String.raw`${card.description.replace(/\\/g, "\\\\")}`
                );

                document.getElementById("card_description").innerHTML = description_html;

                var tags_html = "";
                current_card_tags.clear();
                var tags_array = card.tags.trim().split(" ");
                for (let i = 0; i < tags_array.length; i++) {
                    if (tags_array[i].length > 0) {
                        tags_html += `<button id="card_tag_text_${tags_array[i]}" class="card_tag_button_text">${tags_array[i]}</button><button id="card_tag_remove_${tags_array[i]}" class="card_tag_button_remove" onclick="removeTagFromCard('${tags_array[i]}')"> <i class="fa fa-times fa-fw" aria-hidden="true"></i> </button>`;
                        current_card_tags.add(tags_array[i]);
                    }
                }
                document.getElementById("already_set_card_tags").innerHTML = tags_html;
                current_card_tags_have_changed = false;

                document.getElementById("card_urgency").value = card.urgency;
                document.getElementById("card_urgency_number").innerText = card.urgency;
                document.getElementById("card_description").removeAttribute("contenteditable");
                document.getElementById("side_bar_contents").style.height = document.getElementById("card_template").style.height;

                // Reset the contents of the current_card variable
                changed_items = new Set([]);
                current_card_id = card._id;
                post_url = "/update-card";
                raw_description = card.description;

                // hljs.configure({ useBR: true });
                $('pre code').each(function (i, block) {
                    hljs.highlightBlock(block);
                });

                loadMathJAX();
            }
            
            /**
             * @description Reload MathJAX to render new LaTEX
             * http://docs.mathjax.org/en/latest/advanced/typeset.html
             */
            function loadMathJAX() {
                MathJax.Hub.Queue(["Typeset", MathJax.Hub, "card_description"]);
            }

            function displayRawCardDescription() {
                var description_element = document.getElementById("card_description");
                description_element.innerText = raw_description;
                description_element.setAttribute("contenteditable", "true");
                window.removeEventListener("keydown", arrowKeysForNavigation);
            }

            function displayNewCard() {
                document.getElementById("card_title").value = "";
                document.getElementById("card_description").innerHTML = "";
                document.getElementById("already_set_card_tags").value = "";
                current_card_tags_have_changed = false;

                document.getElementById("card_urgency").value = 0;
                document.getElementById("card_urgency_number").innerText = "0";
                document.getElementById("card_description").setAttribute("contenteditable", "true");
                document.getElementById("side_bar_contents").style.height = document.getElementById("card_template").style.height;
                window.removeEventListener("keydown", arrowKeysForNavigation);

                // Reset the contents of the current_card variable
                changed_items.clear();
                current_card_tags.clear();
                current_card_id = null;
                raw_description = "";
                post_url = "/add-card";
            }

            function handleInputChange(element_id) {
                window.removeEventListener("keydown", arrowKeysForNavigation);
                changed_items.add(element_id);
            }

            function handleTagsInputChange(event) {
                window.removeEventListener("keydown", arrowKeysForNavigation);
                var tag_being_entered = document.getElementById("card_tag_input").value;
                var key_press = event.key;
                // If whitespace was added, create the new tag if need be.
                if (key_press === " " || key_press === "Enter" || key_press === "Tab") {
                    updateTagsButtons(tag_being_entered.trim());
                } else {
                    // Provide autocomplete results
                    autocomplete_html = ""
                    var matches = tags_trie.keys_with_prefix(tag_being_entered);
                    var num_results_to_show = 5;
                    if (matches.length < 5) num_results_to_show = matches.length;
                    for (let i = 0; i < matches.length; i++) {
                        autocomplete_html += `<button class="autocomplete_suggestion_button" onclick="updateTagsButtons('${matches[i]}');">${matches[i]}</button>`;
                    }
                    document.getElementById("tags_autocomplete_results").innerHTML = autocomplete_html;
                }
                
            }

            function updateTagsButtons(new_tag) {
                if (!current_card_tags.has(new_tag)) {
                    current_card_tags.add(new_tag);
                    document.getElementById("tags_autocomplete_results").innerHTML = "";
                    document.getElementById("already_set_card_tags").insertAdjacentHTML(
                        "beforeend",
                        `<button id="card_tag_text_${new_tag}" class="card_tag_button_text">${new_tag}</button><button id="card_tag_remove_${new_tag}" class="card_tag_button_remove" onclick="removeTagFromCard('${new_tag}')"> <i class="fa fa-times fa-fw" aria-hidden="true"></i> </button>`
                    );
                    document.getElementById("card_tag_input").value = "";
                    current_card_tags_have_changed = true;
                }
            }

            function removeTagFromCard(tag) {
                document.getElementById(`card_tag_text_${tag}`).remove();
                document.getElementById(`card_tag_remove_${tag}`).remove();
                current_card_tags.delete(tag);
                current_card_tags_have_changed = true;
            }

            function insertTabsIfNecessary(event) {
                if (event.key == "Tab") {
                    document.execCommand("insertHTML", false, "&nbsp;&nbsp;&nbsp;&nbsp;");
                    event.preventDefault();
                }
            }

            function updateUrgencyCounter() {
                document.getElementById("card_urgency_number").innerText = document.getElementById("card_urgency").value;
            }

            function saveCard() {
                var payload = {};
                changed_items.forEach((element_id) => {
                    payload[element_id.split("card_")[1]] = document.getElementById(element_id).value;
                });
                if (current_card_id) {
                    payload._id = current_card_id;
                }

                if (changed_items.has("card_description")) {
                    payload.description = String.raw`${document.getElementById("card_description").innerText}`;
                }

                payload.createdById = current_user_id;
                if (current_card_tags_have_changed) {
                    payload.tags = Array.from(current_card_tags).join(" ");
                }
                
                // If the tags or urgency has been changed, update the sidebar to reflect current info
                var rerender_sidebar = current_card_tags_have_changed || changed_items.has("card_urgency");
                
                sendHTTPRequest("POST", post_url, payload, (response) => {
                    var saved_card = response.message;
                    my_cards_manager.update_card(saved_card);
                    renderCard(saved_card);

                    if (rerender_sidebar) {
                        saved_card.tags.split(" ").forEach(tag => {
                            if (tag !== "") {
                                tag = tag.trim();
                                if (!tags_and_ids.hasOwnProperty(tag)) {
                                    tags_and_ids[tag] = {};
                                }
                                tags_and_ids[tag][saved_card._id] = {urgency: saved_card.urgency};
                            }
                        });
                        initializeSideBar();
                    }
                });

            }
            
            function moveCardToTrash() {
                // Remove the card from the ones that get displayed
                var removed_card_id = my_cards_manager.remove_card(current_card_id);
                if (removed_card_id === current_card_id) {
                    // Move on to the next card in the PQ
                    if (my_cards_manager.num_next() > 0) {
                        fetchNextCard();
                    } else if (my_cards_manager.num_prev() > 0) {
                        fetchPreviousCard();
                    } else {
                        displayNewCard();
                    }

                    // Request the server to trash the card
                    sendHTTPRequest("POST", "/trash-card", 
                        {
                            _id: removed_card_id, createdById: current_user_id
                        }, 
                        (trash_confirmation) => {
                            displayPopUp(trash_confirmation.message, 10000);
                    });

                } else {
                    console.log("Error: The wrong card was removed!");
                }
            }

            function restoreFromTrash(card_to_restore_id, card_to_restore_urgency) {
                sendHTTPRequest(
                    "POST", "/restore-from-trash", 
                    {
                        createdById: current_user_id,
                        _id: card_to_restore_id,
                    },
                    (response) => {
                        if (response.message === card_to_restore_id) {
                            my_cards_manager.insert_card(card_to_restore_id, card_to_restore_urgency);
                            fetchPreviousCard();
                        }
                    }
                );
            }
            
            /*
             * @description Provide search results for queries typed in the 
             * search bar. If the space bar is pressed, only ask for 7 results,
             * otherwise ask for all matching documents.
             */
            function searchCards(event) {
                window.removeEventListener("keydown", arrowKeysForNavigation);
                var key_press = event.key;
                if (key_press === " " || key_press === "Enter") {
                    var query_string = document.getElementById("card_search_input").value.trim();
                    if (key_press === " ") limit = 7;
                    else limit = Infinity;
                    if (query_string !== "") {
                        sendHTTPRequest(
                            "POST", "/search-cards",
                            {
                                query_string: query_string,
                                limit: limit
                            },
                            (response) => {
                                if (response.success) {
                                    console.log(`\n${response.message.length} search results`);
                                    var search_results = response.message;
                                    if (key_press === " ") {
                                        var search_results_html = "";
                                        for (let i = 0; i < search_results.length; i++) {
                                            search_results_html += `
                                                <ul onclick='reInitializeCards([${JSON.stringify(search_results[i])}]);'>
                                                ${search_results[i].title}</ul>`;
                                        }
                                        document.getElementById("card_search_results").innerHTML = search_results_html;
                                    } else {
                                        reInitializeCards(search_results);
                                    }    
                                }
                            }
                        );
                    }
                }
            }
            
            /*
             * @description Reset the queue of cards to be viewed. 
             * @param {Array} abbreviated_cards Array of JSON objects having the
             * keys `_id`, and `urgency`
             */  
            function reInitializeCards(abbreviated_cards) {
                document.getElementById("card_search_results").innerHTML = "";
                my_cards_manager.initialize_from_minicards(
                    abbreviated_cards, 
                    () => {
                        my_cards_manager.next((card) => {
                            renderCard(card);
                        });
                    }
                );
            }
            
            /**
             * Once the user logs in, display the logout button 
             */ 
            function includeInAppButtons() {
                var nav_bar = document.getElementById("topnavitems");
                nav_bar.insertAdjacentHTML('beforeend', 
                    `<li>
                        <button 
                            class="w3-button w3-padding-small top-nav w3-right" 
                            onClick="logOut()"><b>Log Out</b>
                        </button>
                    </li>`
                );
            }

            function logOut() {
                sendHTTPRequest("POST", "/logout", {}, (response) => {
                    localStorage.clear();
                    window.location = "/";
                });
            }

        </script>

    </body>

</html>