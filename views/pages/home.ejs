<!DOCTYPE html>
<html>

    <head>
        <title><%= APP_NAME %>: Home</title>
        <% include ../partials/header.ejs %>
        <% include ../partials/syntax_highlighting_and_latex.ejs %>
        <script type="text/javascript" src="/dist/CardsManager.bundle.min.js"></script>
        <script type="text/javascript" src="/dist/CardTemplateUtilities.bundle.min.js"></script>
        <script type="text/javascript" src="/dist/TagsBarUtilities.bundle.min.js"></script>
        <script type="text/javascript" src="/dist/AutoComplete.bundle.min.js"></script>
        <script type="text/javascript">

            /**
             * @description Make LEFT/RIGHT arrow keys show PREVIOUS/NEXT card.
             */ 
            function arrowKeysForNavigation(event) {
                if (event.key === "ArrowLeft") {
                    fetchPreviousCard();
                    event.preventDefault();
                } else if (event.key === "ArrowRight") {
                    fetchNextCard();
                    event.preventDefault();
                }
            }

            window.addEventListener("keydown", arrowKeysForNavigation);

        </script>
        
    </head>

    <body onload="initializeHomepage();">

        <% include ../partials/navbar.ejs %>

        <div id="main_div">

            <div class="w3-container" id="status_bar">

                <div id="card_search_container" class="w3-half">
                    <div class="dropdown">
                        <input type="text" id="card_search_input" placeholder="Search card descriptions and titles..." onkeydown="searchCards(event)"
                            class="dropbtn" onblur="window.setTimeout(clearSearchResults, 300);" />
                        <div class="dropdown-content" id="card_search_results"></div>
                    </div>
                </div>

                <label class="w3-right switch tooltip">
                    <input type="checkbox" id="reviewModeToggle" onchange="toggleOption('reviewModeToggle');">
                    <span class="slider round" id="review_mode_label"></span>
                    <span class="tooltiptext" id="review_mode_tooltip">
                        After the urgency of a card has been modified, automatically 
                        save the current card and load the next card. 
                        <a href="/wiki#review_mode" target="_blank">Read more</a>
                    </span>
                </label>
                
            </div>

            <div>
                <p class="w3-left w3-quarter w3-container tooltip">
                    <i class="fa fa-fw fa-info-circle" aria-hidden="true"></i> The Tagging and Urgency System
                    <span class="tooltiptext" id="tagging_system_tooltip">
                        The tags with the most urgent cards appear earlier on the list. 
                        "#probability (7)" means that there are 7 cards that have 'probability' as one of their tags. 
                        <a href="/wiki/#tagging_system" target="_blank">Read more</a>
                    </span>
                </p>
                <p id="filter_list" class="w3-right w3-threequarter w3-container"></p>
            </div>

            <div class="w3-container">

                <% include ../partials/tags_bar_template.ejs %>
                
                <div class="w3-container w3-right w3-threequarter" id="card_template">
                    <% include ../partials/card_template.ejs %>
                </div>

            </div>
            
        </div>

        <% include ../partials/footer.ejs %>


        <script type="text/javascript">
            
            /* If a user is logged in, there'll be some metadata about them in 
             * Local Storage. 
             */
            let metadata, state, autocomplete, cardsManager;
            const userSettings = AppUtilities.getAccountInfo();

            function initializeHomepage() {
                AppUtilities.refreshMetadata()
                    .then((metadataDoc) => {
                        metadata = metadataDoc;
                        state = {
                            changedItems: new Set([]),
                            currentCardID: null,
                            currentUserID: metadata.createdById,
                            rawDescription: null,
                            selectedTags: new Set([]),
                            tagsAndIDs: metadata.node_information[0],
                            currentCardTags: new Set([]),
                            currentCardTagsHaveChanged: false,
                            cardPostURL: "/add-card",
                            reviewModeToggle: false,
                            card_is_public_toggle: userSettings.cardsAreByDefaultPrivate
                        }
                        if (!state.tagsAndIDs) state.tagsAndIDs = {};

                        autocomplete = new AutoComplete();
                        autocomplete.initializePrefixTree(Object.keys(state.tagsAndIDs));
                        cardsManager = new CardsManager(state.tagsAndIDs, state.currentUserID);

                        TagsBarUtilities.initializeTagsBar("side_bar_contents", state.tagsAndIDs);
                        initializeCards();
                        return AppUtilities.sendHTTPRequest("POST", "/read-tag-groups", {userIDInApp: state.currentUserID});
                    })
                    .then((tagGroupsResponse) => {
                        tagGroupsResponse = JSON.parse(tagGroupsResponse);
                        if (tagGroupsResponse.success) {
                            autocomplete.initializeGraphFromGroups(tagGroupsResponse.message);
                        }
                    })
                    .catch((err) => { console.error(err); });
            }

            // Maintain references to elements that get searched for often
            const elementRefs = {
                alreadySetTagsElement: document.getElementById("already_set_card_tags"),
                cardDescriptionElement: document.getElementById("card_description"),
                cardIsPublicToggleElement: document.getElementById("card_is_public_toggle"),
                cardPopupElement: document.getElementById("card_popup_element"),
                cardSearchInputElement: document.getElementById("card_search_input"),
                cardSearchResultsElement: document.getElementById("card_search_results"),
                cardTagInputElement: document.getElementById("card_tag_input"),
                cardTemplateElement: document.getElementById("card_template"),
                cardTitleElement: document.getElementById("card_title"),
                cardUrgencyElement: document.getElementById("card_urgency"),
                cardUrgencyNumberElement: document.getElementById("card_urgency_number"),
                filterListElement: document.getElementById("filter_list"),
                sideBarContentsElement: document.getElementById("side_bar_contents"),
                spoilerElement: document.getElementById("spoiler"),
                spoilerBoxElement: document.getElementById("spoiler_box"),
                spoilerEndElement: document.getElementById("spoiler_end"),
                tagsAutocompleteResultsElement: document.getElementById("tags_autocomplete_results"),
                shareableLinkElement: document.getElementById("shareable_link")
            };

            function initializeCards() {
                cardsManager
                    .initializeFromTags(null)
                    .then(() => { 
                        colorUrgencyQuartiles(cardsManager.quartiles());
                        return cardsManager.next(); 
                    })
                    .then((card) => { renderCard(card); })
                    .catch((err) => { console.error(err); });
            }

            function fetchPreviousCard() {
                cardsManager.previous()
                    .then((card) => { renderCard(card); })
                    .catch((err) => { console.error(err); });
            }
    
            function fetchNextCard() {
                cardsManager.next()
                    .then((card) => { renderCard(card); })
                    .catch((err) => { console.error(err); });
            }

            function toggleOption(element_id) {
                state[element_id] = document.getElementById(element_id).checked;
            }

            function makeInvisible(element_id) {
                document.getElementById(element_id).style.visibility = "hidden";
            }

            function filterCards() {
                
                // I apologize for this embarassing line. :-(
                let tagsToUse = TagsBarUtilities.getSelectedTags();

                // Communicate which cards are being displayed...
                if (tagsToUse === null) {
                    elementRefs.filterListElement.innerHTML = "Now showing: all";
                } else {
                    elementRefs.filterListElement.innerHTML = `Now showing: ${Array.from(tagsToUse).join(", ")}`;;
                }

                // Update the cards being displayed
                cardsManager
                    .initializeFromTags(tagsToUse)
                    .then(() => { 
                        colorUrgencyQuartiles(cardsManager.quartiles());
                        return cardsManager.next(); 
                    })
                    .then((card) => { renderCard(card); })
                    .catch((err) => { console.error(err); });
            }

            function clearSearchResults() {
                elementRefs.cardSearchResultsElement.innerHTML = '';
            }

            /**
             * Color the quartile marker with the quartile range for the 
             * current selection of cards. The quartile marker is located right 
             * below the urgency slider.
             * 
             * @param {Array} quartiles The values of the 1st, 2nd, 3rd and 4th 
             * quartiles. Assumes the maximum urgency is 10.
             */ 
            function colorUrgencyQuartiles(quartiles) {
                if (quartiles.length == 4) {
                    let bar_width_ids = [
                        "first_quartile_marker", "second_quartile_marker", 
                        "third_quartile_marker", "fourth_quartile_marker"
                    ];
                    let bar_width_percentages = [
                        Math.floor(quartiles[0] * 10), 0, 0, 0
                    ];
                    for (let i = 1; i < quartiles.length; i++) {
                        bar_width_percentages[i] = Math.floor((quartiles[i] - quartiles[i-1]) * 10);
                    }
                    
                    for (let i = 0; i < bar_width_ids.length; i++) {
                        document.getElementById(bar_width_ids[i]).style.width = `${bar_width_percentages[i]}%`;
                    }
                }
                 
            }

            function renderCard(card) {

                if (!card) {
                    CardTemplateUtilities.displayPopUp("Out of cards!", 1500);
                    return;
                }

                state.currentCardTags.clear();
                state.currentCardTagsHaveChanged = false;
                state.changedItems = new Set([]);

                // Reset card contents
                if (!card.description) card.description = "";
                if (!card.tags) card.tags = "";
                if (!card.title) card.title = "";
                if (!card.urgency) card.urgency = 0;

                window.addEventListener("keydown", arrowKeysForNavigation);
                elementRefs.cardTitleElement.value = card.title;
                
                elementRefs.cardDescriptionElement.innerHTML = card.descriptionHTML;

                let tagsHTML = "";
                var tagsArray = card.tags.trim().split(" ");
                for (let i = 0; i < tagsArray.length; i++) {
                    if (tagsArray[i].length > 0) {
                        tagsHTML += `<button id="card_tag_text_${tagsArray[i]}" class="card_tag_button_text">${tagsArray[i]}</button><button id="card_tag_remove_${tagsArray[i]}" class="card_tag_button_remove" onclick="removeTagFromCard('${tagsArray[i]}')"> <i class="fa fa-times fa-fw" aria-hidden="true"></i> </button>`;
                        state.currentCardTags.add(tagsArray[i]);
                    }
                }
                elementRefs.alreadySetTagsElement.innerHTML = tagsHTML;
                elementRefs.cardUrgencyElement.value = card.urgency;
                elementRefs.cardUrgencyNumberElement.innerText = card.urgency;
                elementRefs.cardDescriptionElement.removeAttribute("contenteditable");
                elementRefs.sideBarContentsElement.style.height = elementRefs.cardTemplateElement.style.height;
                
                elementRefs.cardIsPublicToggleElement.checked = card.isPublic;
                state.cardIsPublicToggle = card.isPublic;
                if (card.isPublic) {
                    elementRefs.shareableLinkElement.innerText = `${document.location.origin}/browse/?cardID=${card._id}`;
                } else {
                    elementRefs.shareableLinkElement.innerText = "";
                }
                

                // Reset the contents of the current_card variable
                state.currentCardID = card._id;
                state.cardPostURL = "/update-card";
                state.rawDescription = card.description;

                PrettifyCards.addSyntaxHighlighting();
                PrettifyCards.renderLatex(["card_description"]);

                CardTemplateUtilities.syncSpoilerBox();
            }

            function displayRawCardDescription() {
                elementRefs.cardDescriptionElement.innerText = state.rawDescription;
                elementRefs.cardDescriptionElement.setAttribute("contenteditable", "true");
                window.removeEventListener("keydown", arrowKeysForNavigation);
            }

            function displayNewCard() {
                elementRefs.cardTitleElement.value = "";
                elementRefs.cardDescriptionElement.innerHTML = "";
                elementRefs.alreadySetTagsElement.innerHTML = "";
                elementRefs.shareableLinkElement.innerText = "";
                elementRefs.cardIsPublicToggleElement.checked = userSettings.cardsAreByDefaultPrivate;

                state.cardIsPublicToggle = userSettings.cardsAreByDefaultPrivate;
                state.currentCardTagsHaveChanged = false;

                elementRefs.cardUrgencyElement.value = 10;
                elementRefs.cardUrgencyNumberElement.innerText = "10";
                elementRefs.cardDescriptionElement.setAttribute("contenteditable", "true");
                elementRefs.sideBarContentsElement.style.height = elementRefs.cardTemplateElement.style.height;
                window.removeEventListener("keydown", arrowKeysForNavigation);

                // Reset the contents of the current_card variable
                state.changedItems.clear();
                state.currentCardTags.clear();
                state.currentCardID = null;
                state.rawDescription = "";
                state.cardPostURL = "/add-card";
            }

            function handleInputChange(element_id) {
                window.removeEventListener("keydown", arrowKeysForNavigation);
                state.changedItems.add(element_id);
            }

            function handleTagsInputChange(event) {
                window.removeEventListener("keydown", arrowKeysForNavigation);
                let tagBeingEntered = elementRefs.cardTagInputElement.value;
                let keyPress = event.key;
                // If whitespace was added, create the new tag if need be.
                if (keyPress === " " || keyPress === "Enter" || keyPress === "Tab") {
                    updateTagsButtons(tagBeingEntered.trim());
                } else {
                    // Provide autocomplete results
                    let autocompleteHTML = "";
                    let matches = autocomplete.keysWithPrefix(tagBeingEntered);
                    let numResultsToShow = 5;
                    if (matches.length < 5) numResultsToShow = matches.length;
                    for (let i = 0; i < matches.length; i++) {
                        autocompleteHTML += `<button class="autocomplete_suggestion_button" onclick="updateTagsButtons('${matches[i]}');">${matches[i]}</button>`;
                    }
                    elementRefs.tagsAutocompleteResultsElement.innerHTML = autocompleteHTML;
                }
                
            }

            function suggestNewTags(tagInputElement) {
                if (tagInputElement.value === "" && state.currentCardTags.size > 0) {
                    let suggestedTags = autocomplete.kNeighbors(state.currentCardTags, 5);
                    let autocompleteHTML = "";
                    for (let i = 0; i < suggestedTags.length; i++) {
                        autocompleteHTML += `<button class="autocomplete_suggestion_button" onclick="updateTagsButtons('${suggestedTags[i]}');">${suggestedTags[i]}</button>`;
                    }
                    elementRefs.tagsAutocompleteResultsElement.innerHTML = autocompleteHTML;
                }
            }

            function removeTagSuggestions() {
                elementRefs.tagsAutocompleteResultsElement.innerHTML = "";
            }

            function updateTagsButtons(new_tag) {
                if (new_tag.trim() !== "" && !state.currentCardTags.has(new_tag)) {
                    state.currentCardTags.add(new_tag);
                    elementRefs.tagsAutocompleteResultsElement.innerHTML = "";
                    elementRefs.alreadySetTagsElement.insertAdjacentHTML(
                        "beforeend",
                        `<button id="card_tag_text_${new_tag}" class="card_tag_button_text">${new_tag}</button><button id="card_tag_remove_${new_tag}" class="card_tag_button_remove" onclick="removeTagFromCard('${new_tag}')"> <i class="fa fa-times fa-fw" aria-hidden="true"></i> </button>`
                    );
                    elementRefs.cardTagInputElement.value = "";
                    state.currentCardTagsHaveChanged = true;
                }
            }

            function removeTagFromCard(tag) {
                document.getElementById(`card_tag_text_${tag}`).remove();
                document.getElementById(`card_tag_remove_${tag}`).remove();
                state.currentCardTags.delete(tag);
                state.currentCardTagsHaveChanged = true;
            }

            function insertTabsIfNecessary(event) {
                if (event.key == "Tab") {
                    document.execCommand("insertHTML", false, "&nbsp;&nbsp;&nbsp;&nbsp;");
                    event.preventDefault();
                }
            }

            function handleCardUrgencyChange() {
                handleInputChange("card_urgency");
                if (state.reviewModeToggle) {
                    saveCard(false);
                    fetchNextCard();
                } else {
                    elementRefs.cardUrgencyNumberElement.innerText = elementRefs.cardUrgencyElement.value;
                }
            }

            function saveCard(renderSavedCard=true) {
                let payload = {};
                state.changedItems.forEach((element_id) => {
                    payload[element_id.split("card_")[1]] = document.getElementById(element_id).value;
                });
                if (state.currentCardID) {
                    payload.cardID = state.currentCardID;
                }

                if (state.changedItems.has("card_description")) {
                    payload.description = String.raw`${elementRefs.cardDescriptionElement.innerText}`;
                }

                payload.createdById = state.currentUserID;
                if (state.currentCardTagsHaveChanged) {
                    payload.tags = Array.from(state.currentCardTags).join(" ");
                    state.currentCardTags.forEach((tag) => { autocomplete.updatePrefixTree(tag); });
                }
                payload.isPublic = state.card_is_public_toggle;
                
                // If the tags or urgency has been changed, update the sidebar to reflect current info
                let rerenderSideBar = state.currentCardTagsHaveChanged || state.changedItems.has("card_urgency");

                cardsManager
                    .saveCard(payload, state.cardPostURL)
                    .then((savedCard) => {
                        CardTemplateUtilities.displayPopUp("Card saved!", 1000);
                        if (renderSavedCard) renderCard(savedCard);
                        if (rerenderSideBar) {
                            savedCard.tags.split(" ").forEach(tag => {
                                if (tag !== "") {
                                    tag = tag.trim();
                                    if (!state.tagsAndIDs.hasOwnProperty(tag)) {
                                        state.tagsAndIDs[tag] = {};
                                    }
                                    state.tagsAndIDs[tag][savedCard._id] = {urgency: savedCard.urgency};
                                }
                            });
                            TagsBarUtilities.initializeTagsBar("side_bar_contents", state.tagsAndIDs);
                        }
                    })
                    .catch((err) => { console.error(err); });

            }
            
            function moveCardToTrash() {
                // Remove the card from the ones that get displayed
                var removed_card_id = cardsManager.removeCard(state.currentCardID);
                if (removed_card_id === state.currentCardID) {
                    // Move on to the next card in the PQ
                    if (cardsManager.hasNext()) {
                        fetchNextCard();
                    } else if (cardsManager.hasPrev()) {
                        fetchPreviousCard();
                    } else {
                        displayNewCard();
                    }

                    // Request the server to trash the card
                    AppUtilities.sendHTTPRequest("POST", "/trash-card", 
                        {
                            cardID: removed_card_id, createdById: state.currentUserID
                        })
                        .then((trash_confirmation) => {
                            trash_confirmation = JSON.parse(trash_confirmation);
                            CardTemplateUtilities.displayPopUp(trash_confirmation.message, 5000);
                        })
                        .catch((err) => { console.error(err); });

                }
            }

            function restoreCardFromTrash(card_to_restore_id, card_to_restore_urgency) {
                AppUtilities.sendHTTPRequest(
                    "POST", "/restore-from-trash", 
                    {
                        createdById: state.currentUserID,
                        cardID: card_to_restore_id,
                    })
                    .then((response) => {
                        response = JSON.parse(response);
                        if (response.success === true) {
                            cardsManager.insertCard(card_to_restore_id, card_to_restore_urgency);
                            fetchPreviousCard();
                            CardTemplateUtilities.displayPopUp(response.message, 5000);
                        }
                    })
                    .catch((err) => { console.error(err); });
            }
            
            /*
             * @description Provide search results for queries typed in the 
             * search bar. If the space bar is pressed, only ask for 7 results,
             * otherwise ask for all matching documents.
             */
            function searchCards(event) {
                window.removeEventListener("keydown", arrowKeysForNavigation);
                var keyPress = event.key;
                if (keyPress === " " || keyPress === "Enter") {
                    var queryString = elementRefs.cardSearchInputElement.value.trim();
                    if (keyPress === " ") limit = 7;
                    else limit = Infinity;
                    if (queryString !== "") {
                        AppUtilities
                            .sendHTTPRequest(
                                "POST", "/search-cards",
                                { queryString: queryString, limit: limit}
                            )
                            .then((response) => {
                                response = JSON.parse(response);
                                if (response.success) {
                                    var search_results = response.message;
                                    if (keyPress === " ") {
                                        var search_results_html = "";
                                        for (let i = 0; i < search_results.length; i++) {
                                            search_results_html += `
                                                <ul onclick='reInitializeCards([${JSON.stringify(search_results[i])}]);'>
                                                ${search_results[i].title}</ul>`;
                                        }
                                        elementRefs.cardSearchResultsElement.innerHTML = search_results_html;
                                    } else {
                                        elementRefs.cardSearchResultsElement.innerHTML = "";
                                        reInitializeCards(search_results);
                                    }    
                                }
                            })
                            .catch((err) => { console.error(err); });
                    }
                }
            }
            
            /*
             * @description Reset the queue of cards to be viewed. 
             * @param {Array} abbreviated_cards Array of JSON objects having the
             * keys `_id`, and `urgency`
             */  
            function reInitializeCards(abbreviated_cards) {
                elementRefs.cardSearchResultsElement.innerHTML = "";
                cardsManager.initializeFromMinicards(abbreviated_cards)
                    .then(() => { return cardsManager.next(); })
                    .then((card) => { renderCard(card); })
                    .catch((err) => { console.error(err); });
            }

        </script>

    </body>

</html>