<!DOCTYPE html>
<html>
    <head>
        <% include ../partials/header.ejs %>
        <title><%= APP_NAME %>: Browse/Search</title>
        <script type="text/javascript" src="/dist/CardsManager.bundle.min.js"></script>
        <script type="text/javascript" src="/dist/CardTemplateUtilities.bundle.min.js"></script>
        <script type="text/javascript" src="/dist/TagsBarUtilities.bundle.min.js"></script>
        <script type="text/javascript" src="/dist/AutoComplete.bundle.min.js"></script>
        <% include ../partials/syntax_highlighting_and_latex.ejs %>
    </head>

    <body>
        <% include ../partials/navbar.ejs %>

        <div id="main_div">
            <div class="w3-container" id="search_div">

                <form method="GET">
                    <div class="dropdown w3-threequarter">
                        <input type="text" id="search_input" 
                            placeholder="Search for cards, e.g. dynamic programming.  Press [Enter] to view all results" 
                            onkeyup="handleSearchInputChange(event);" class="w3-input dropbtn" name="queryString" />
                        <div class="dropdown-content" id="search_autocomplete_results"></div>
                    </div>
                    <input type="submit" class="w3-quarter w3-btn w3-blue" value="Search for Cards"></button>

                </form>

            </div>

            <div class="w3-container" id="temp_container">

                <div class="w3-container">

                    <% include ../partials/tags_bar_template.ejs %>

                    <p id="current_tag_selection" class="w3-right"></p>

                    <div class="w3-threequarter w3-right flexbox" id="minicards_search_results">
                        <% if (abbreviatedCards.length === 0) { %>
                            <div class="w3-container">
                                <p>No cards found.</p>
                            </div>
                        <% } else { %>
                            <% for (let i = 0; i < abbreviatedCards.length; i++) { %>
                                <div class="w3-card-4 w3-padding-small w3-margin minicard_search_result" onclick="displayFullCard('<%= abbreviatedCards[i]._id %>')">
                                    <header class="w3-container w3-pale-green"><h4><%= abbreviatedCards[i].title %></h4></header>
                                    <div class="w3-container"><p><strong>Tags: </strong><span id='tags<%= abbreviatedCards[i]._id %>'><%= abbreviatedCards[i].tags.split(/\s/).join(", ") %></span></p></div>
                                </div>
                            <% } %>
                        <% } %>
                    </div>
                </div>

                <div id="card_modal" class="w3-modal">
                    <div id="card_container_holder" class="w3-modal-content">
                        <% include ../partials/search_result_card_template.ejs %>
                    </div>
                </div>
                
            </div>

        </div>

    </body>

    <script type="text/javascript">

        let cardsManager = null;
        let autocomplete;

        let state = {
            currentCardID: null,
            currentTagSelectionElement: document.getElementById("current_tag_selection"),
            searchResultsElement: document.getElementById("minicards_search_results")
        }; 

        AppUtilities
            .sendHTTPRequest("POST", "/read-public-metadata", {})
            .then((response) => {
                response = JSON.parse(response);
                state.tagsAndIDs = response.message[0].node_information[0];
                cardsManager = new CardsManager(state.tagsAndIDs, null, cardSourceURL="/read-public-card");
                TagsBarUtilities.initializeTagsBar("side_bar_contents", state.tagsAndIDs);
                autocomplete = new AutoComplete();
                autocomplete.initializePrefixTree(Object.keys(state.tagsAndIDs));
            })
            .catch((err) => { console.error(err); });

        const USER_INFO = AppUtilities.getAccountInfo();

        const elementRefs = {
            searchInputElement: document.getElementById("search_input"),
            cardContainerHolderElement: document.getElementById("card_modal"),
            cardTitleElement: document.getElementById("card_title"),
            cardDescriptionElement: document.getElementById("card_description"),
            cardTagsElement: document.getElementById("card_tags"),
            cardPopularityElement: document.getElementById("card_popularity")
        };
    
        function handleSearchInputChange() {
            state.queryString = elementRefs.searchInputElement.value;
        }

        function filterCards() {
            let selectedIDs = TagsBarUtilities.getIDsOfSelectedTags();
            let payload, currentTagsString;
            if (selectedIDs === null) {
                currentTagsString = "all";
                payload = {};
            } else {
                currentTagsString = Array.from(TagsBarUtilities.getSelectedTags()).join(", ");
                payload = {cardIDs: Array.from(selectedIDs)};
            }  

            AppUtilities
                .sendHTTPRequest("POST", "/browse", payload)
                .then((response) => {
                    response = JSON.parse(response);
                    if (!response.success) {
                        console.error(response.message); return;
                    }
                    state.currentTagSelectionElement.innerHTML = `Current Tags: ${currentTagsString}`;
                    abbreviatedCards = response.message;
                    searchResultsHTML = ``;
                    for (let i = 0; i < abbreviatedCards.length; i++) {
                        searchResultsHTML += `
                            <div class="w3-card-4 w3-padding-small w3-margin search-result" onclick="displayFullCard('${abbreviatedCards[i]._id}')">
                            <header class="w3-container w3-pale-green"><h4>${abbreviatedCards[i].title}</h4></header>
                            <div class="w3-container"><p><strong>Tags: </strong><span id="tags${abbreviatedCards[i]._id}">${abbreviatedCards[i].tags.split(/\s/).join(", ")}</span></p></div>
                            </div>
                        `;
                    }
                    state.searchResultsElement.innerHTML = searchResultsHTML;
 
                })
                .catch((err) => { console.error(err); });
        }

        function displayFullCard(cardID) {
            cardsManager
                .initializeFromMinicards(
                    [{
                        _id: cardID, urgency: Number.POSITIVE_INFINITY,
                        tags: document.getElementById(`tags${cardID}`).innerText.split(", ")
                    }], 
                    includeTagNeighbors=true
                )
                .then(() => { return cardsManager.next(); })
                .then((card) => { 
                    // 2x so that the spoiler box can have positive dimensions
                    renderCard(card); renderCard(card);
                    elementRefs.cardContainerHolderElement.style.display = "block";
                })
                .catch((err) => { console.error(err); });
        }

        function fetchPreviousCard() {
            cardsManager.previous()
                .then((card) => { renderCard(card); })
                .catch((err) => { console.error(err); });
        }

        function fetchNextCard() {
            cardsManager.next()
                .then((card) => { renderCard(card); })
                .catch((err) => { console.error(err); });
        }

        function makeInvisible(elementID) {
            CardTemplateUtilities.makeInvisible(elementID);
        }

        function flagCard(reason) {
            if (USER_INFO === null) {
                if (window.confirm("Please login/signup first. May I take you to the login page?")) {
                    window.location = "/login";
                }
                return;
            }
            
            let flagObject = { cardID: state.currentCardID };
            flagObject[reason] = true;
            AppUtilities
                .sendHTTPRequest("POST", "/flag-card", flagObject)
                .then((confirmation) => {
                    confirmation = JSON.parse(confirmation);
                    CardTemplateUtilities.displayPopUp(
                        confirmation.message, 10000
                    );
                })
                .catch((err) => { console.error(err); });
        }

        function copyCardToOwnCollection() {
            if (USER_INFO === null) {
                if (window.confirm("Please login/signup first. May I take you to the login page?")) {
                    window.location = "/login";
                }
                return;
            }
            AppUtilities
                .sendHTTPRequest(
                    "POST", "/duplicate-card", 
                    { 
                        cardID: state.currentCardID,
                        newCardIsPrivate: USER_INFO.cardsAreByDefaultPrivate
                    })
                .then((confirmation) => {
                    confirmation = JSON.parse(confirmation);
                    let ownCard = confirmation.message;
                    CardTemplateUtilities.displayPopUp(
                        `Added ${ownCard.title} to your collection!`, 1000
                    );
                    localStorage.setItem(ownCard._id, JSON.stringify(ownCard));
                })
                .catch((err) => { console.error(err); });
        }

        function renderCard(card) {

            if (!card) {
                CardTemplateUtilities.displayPopUp("Out of cards!", 1500);
                return;
            }
    
            elementRefs.cardTitleElement.innerHTML = card.title;
            elementRefs.cardDescriptionElement.innerHTML = card.descriptionHTML;
        
            elementRefs.cardTagsElement.innerText = card.tags.trim().replace(/\s/g, ", ");
            elementRefs.cardPopularityElement.innerText = card.idsOfUsersWithCopy.split(", ").length;
            state.currentCardID = card._id;
        
            PrettifyCards.addSyntaxHighlighting();
            PrettifyCards.renderLatex(["card_description"]);

            CardTemplateUtilities.syncSpoilerBox();
    
        };

    </script>

</html>